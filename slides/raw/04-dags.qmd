---
title: "Causal Diagrams in R"
author: "Malcolm Barrett"
institute: "Stanford University"
format: "kakashi-revealjs"
---

## {background-color="#23373B" .center .huge}

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)

library(tidyverse)
library(ggdag)

set.seed(1234)
coords <- time_ordered_coords(
  list(
    c("active", "age", "education", "exercise", "race", "sex", "smokeintensity", 
"smokeyrs", "wt71"),
    "qsmk",
    "wt82_71"
  )
)

smk_wt_dag <- dagify(
  # specify causes of quitting smoking and weight gain:
  qsmk ~ sex + race + age + education + 
    smokeintensity + smokeyrs + exercise + active + wt71,
  wt82_71 ~ qsmk + sex + race + age + education + 
    smokeintensity + smokeyrs + exercise + active + wt71,
  # specify causal question:
  exposure = "qsmk", 
  outcome = "wt82_71",
  coords = coords,
  # set up labels:
  # here, I'll use the same variable names as the data set, but I'll label them
  # with clearer names
  labels = c(
    # causal question
    "qsmk" = "quit\nsmoking",
    "wt82_71" = "change in\nweight",
    
    # demographics
    "age" = "age",
    "sex" = "sex",
    "race" = "race",
    "education" = "education",
    
    # health
    "wt71" = "baseline\nweight",
    "active" = "daily\nactivity\nlevel",
    "exercise" = "exercise",
    
    # smoking history
    "smokeintensity" = "smoking\nintensity",
    "smokeyrs" = "yrs of\nsmoking"
  )
)

```

### **Draw your causal assumptions with causal directed acyclic graphs (DAGs)**

## The basic idea {background-color="#23373B"}

1. Specify your causal question
1. Use domain knowledge
1. Write variables as nodes
1. Write causal pathways as arrows (edges)

## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}

## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}

<br />


```{r}
#| echo: false
#| out.width: 100%
#| out.height: 100%
knitr::include_graphics("img/ggdagitty.png")
```

## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}

<br />

```{r}
#| echo: false
#| out.width: 100%
#| out.height: 100%
knitr::include_graphics("img/ggdagitty_alg.png")
```


## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}

<br />

```{r}
#| echo: false
#| out.width: 100%
#| out.height: 100%
knitr::include_graphics("img/ggdagitty_plots.png")
```


## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}

<br />


```{r}
#| echo: false
#| out.width: 100%
#| out.height: 100%
knitr::include_graphics("img/tidy_ggdagitty.png")
```

## Step 1: Specify your DAG 

. . .

```{r}
#| eval: false
#| code-line-numbers: "|2|3"
library(ggdag)
dagify(
  cancer ~ smoking, 
  coffee ~ smoking
)
```

## Step 1: Specify your DAG


```{r}
#| output-location: slide
dagify(
  cancer ~ smoking, 
  coffee ~ smoking 
) |> ggdag()
```

## Step 1: Specify your DAG


```{r}
#| output-location: slide
dagify(
  cancer ~ smoking + coffee, 
  coffee ~ smoking 
) |> ggdag()
```

## *Your Turn 1* (**`04-dags-exercises.qmd`**) {.small}

### Specify a DAG with `dagify()`. Write your assumption that `smoking` causes `cancer` as a formula. 
### We're going to assume that coffee does not cause cancer, so there's no formula for that. But we still need to declare our causal question. Specify "coffee" as the exposure and "cancer" as the outcome (both in quotations marks).
### Plot the DAG using `ggdag()`
### Finish early? Try the *stretch goals*

`r countdown::countdown(minutes = 5)`

## *Your Turn 1* (`02-dags-exercises.qmd`)

```{r}
coffee_cancer_dag <- dagify(
  cancer ~ smoking,
  smoking ~ addictive,
  coffee ~ addictive,
  exposure = "coffee",
  outcome = "cancer",
  labels = c(
    "coffee" = "Coffee", 
    "cancer" = "Lung Cancer", 
    "smoking" = "Smoking", 
    "addictive" = "Addictive \nBehavior"
  )
)
```

---

```{r}
ggdag(coffee_cancer_dag)
```

---

## Causal effects and backdoor paths {.large}

. . .

**Ok, correlation != causation. But why not?**

. . .

**We want to know if `x -> y`...**

. . .

**But other paths also cause associations**

## `ggdag_paths()` {.large}

Identify "backdoor" paths

. . .

```{r}
#| eval: false
ggdag_paths(smk_wt_dag)
```

---

```{r}
#| echo: false
#| fig.width: 9
smk_wt_dag |>
  dag_paths(paths_only = FALSE) |>
  ggplot(aes(x = x, y = y, xend = xend, yend = yend, col = path, alpha = path)) +
  geom_dag_edges_link(
    aes(
      edge_alpha = path, 
      edge_colour = path,
      start_cap = ggraph::circle(3, 'mm'), 
      end_cap = ggraph::circle(3, 'mm')
    )
  ) +
  geom_dag_point(size = 4) + 
  facet_wrap(~forcats::fct_inorder(as.factor(set), ordered = TRUE)) +
  scale_alpha_manual(
    drop = FALSE, 
    values = c("open path" = 1), 
    na.value = .35, 
    breaks = "open path"
  ) +
  ggraph::scale_edge_alpha_manual(
    drop = FALSE, 
    values = c("open path" = 1), 
    na.value = .35, 
    breaks = "open path"
  ) +
  ggraph::scale_edge_colour_hue(drop = FALSE, breaks = "open path") +
  scale_color_hue(drop = FALSE, breaks = "open path") +
  expand_plot(
    expand_x = expansion(c(0.25, 0.25)),
    expand_y = expansion(c(0.1, 0.1))
  ) + 
  theme(legend.position = "none")
```

## *Your Turn 2* {.small}

### Call `tidy_dagitty()` on `coffee_cancer_dag` to create a tidy DAG, then pass the results to `dag_paths()`. What's different about these data?
### Plot the open paths with `ggdag_paths()`. (Just give it `coffee_cancer_dag` rather than using `dag_paths()`; the quick plot function will do that for you.) Remember, since we assume there is *no* causal path from coffee to lung cancer, any open paths must be confounding pathways. 
### Finish early? Try the *stretch goals*

`r countdown::countdown(minutes = 4)`

## *Your Turn 2*

```{r}
coffee_cancer_dag |>
  tidy_dagitty() |>
  dag_paths()
```

---

```{r}
coffee_cancer_dag |>
  ggdag_paths()
```

---

```{r}
#| echo: false
#| fig.width: 6.5
coords <- list(x = c(x = 0, y = 2, q = 1), y = c(x = 0, y = 0, q = 1))

fork <- dagify(
  x ~ q,
  y ~ q,
  exposure = "x",
  outcome = "y",
  coords = coords
)

chain <- dagify(
  q ~ x,
  y ~ q,
  exposure = "x",
  outcome = "y",
  coords = coords
)

collider <- dagify(
  q ~ x + y,
  exposure = "x",
  outcome = "y",
  coords = coords
)

dag_flows <- map(list(fork = fork, chain = chain, collider = collider), tidy_dagitty) |> 
  map("data") |> 
  list_rbind(names_to = "dag") |> 
  mutate(dag = factor(dag, levels = c("fork", "chain", "collider")))

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(edge_width = 1) + 
  geom_dag_point() + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag()
```

---

```{r}
#| echo: false
#| fig.width: 6.5

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(aes(edge_color = dag), edge_width = 1, show.legend = FALSE) + 
  geom_dag_point(color = "grey85") + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag() + 
  ggraph::scale_edge_color_manual(values = c("steelblue", "forestgreen", "firebrick"))
```

---

```{r}
#| echo: false
#| fig.width: 6.5

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(aes(edge_color = dag), edge_width = 1, show.legend = FALSE) + 
  geom_dag_point(color = "grey85") + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag() +
  ggraph::scale_edge_colour_manual(values = c("steelblue", "forestgreen", "grey85"))
```

---

```{r}
#| echo: false
#| fig.width: 6.5

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(aes(edge_color = dag != "fork"), edge_width = 1, show.legend = FALSE) + 
  geom_dag_point(color = "grey85") + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag() +
  ggraph::scale_edge_colour_manual(values = c("steelblue", "grey85"))
```

---

```{r}
#| echo: false
#| fig.width: 6.5

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(aes(edge_color = dag != "chain"), edge_width = 1, show.legend = FALSE) + 
  geom_dag_point(color = "grey85") + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag() +
  ggraph::scale_edge_colour_manual(values = c("forestgreen", "grey85"))
```


---

```{r}
#| echo: false
#| fig.width: 6.5

dag_flows |> 
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_edges(aes(edge_color = dag != "collider"), edge_width = 1, show.legend = FALSE) + 
  geom_dag_point(color = "grey85") + 
  geom_dag_text() + 
  facet_wrap(~ dag) +
  expand_plot(
    expand_x = expansion(c(0.2, 0.2)),
    expand_y = expansion(c(0.2, 0.2))
  ) +
  theme_dag() +
  ggraph::scale_edge_colour_manual(values = c("firebrick", "grey85"))
```


## Closing backdoor paths {.large}

. . .

**We need to account for these open, non-causal paths**

. . .

**Randomization**

. . .

**Stratification, adjustment, weighting, matching, etc.**

## Identifying adjustment sets

```{r}
#| output-location: slide
#| fig.width: 8
ggdag_adjustment_set(smk_wt_dag)
```


## Identifying adjustment sets

```{r}
library(dagitty)
adjustmentSets(smk_wt_dag)
```

## *Your Turn 3* {.small}

### Now that we know the open, confounding pathways (sometimes called "backdoor paths"), we need to know how to close them! First, we'll ask {ggdag} for adjustment sets, then we would need to do something in our analysis to account for at least one adjustment set (e.g. multivariable regression, weighting, or matching for the adjustment sets).

### Use `ggdag_adjustment_set()` to visualize the adjustment sets. Add the arguments `use_labels = "label"` and `text = FALSE`.
### Write an R formula for each adjustment set, as you might if you were fitting a model in `lm()` or `glm()`

### Finish early? Try the *stretch goals*

`r countdown::countdown(minutes = 4)`

## *Your Turn 3*

```{r}
#| output-location: slide
ggdag_adjustment_set(
  coffee_cancer_dag, 
  use_labels = "label", 
  text = FALSE
)
```


## *Your Turn 3*

```{r}
#| eval: false
cancer ~ coffee + addictive
cancer ~ coffee + smoking
```


## Let's prove it!

```{r}
set.seed(1234)
dag_data <- coffee_cancer_dag |> 
  simulate_data(-.6)
```

## Let's prove it!

```{r}
dag_data
```

## Let's prove it!

```{r}
#| echo: false

fit_model <- function(fmla) {
  lm(fmla, data = dag_data) |> 
    broom::tidy(conf.int = TRUE) |> 
    dplyr::filter(term == "coffee") |> 
    dplyr::mutate(formula = as.character(fmla)[3]) |> 
    dplyr::select(formula, estimate, conf.low, conf.high)
}

bind_rows(
  fit_model(cancer ~ coffee),
  fit_model(cancer ~ coffee + smoking),
  fit_model(cancer ~ coffee + addictive)
) |> 
  ggplot(aes(x = estimate, y = formula, xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0, size = 1, color = "grey80") + 
  geom_pointrange(color = "steelblue", fatten = 3, size = 1) +
  theme_minimal(18) +
  labs(
    y = NULL,
    caption = "correct effect size: 0"
  )
```

## Time-ordering

```{r}
#| echo: false
#| fig.width: 10
map(list(fork = fork, chain = chain, collider = collider), tidy_dagitty, layout = "time_ordered") |> 
    map("data") |> 
    list_rbind(names_to = "dag") |> 
    mutate(dag = factor(dag, levels = c("fork", "chain", "collider"))) |> ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_dag_edges(edge_width = 1) + 
    geom_dag_point() + 
    geom_dag_text() + 
    facet_wrap(~ dag) +
    expand_plot(
        expand_x = expansion(c(.1, .1)),
        expand_y = expansion(c(0.2, 0.2))
    ) +
    theme_dag()
```

## {background-color="#23373B" .large .center .middle}

### **don't adjust for the future!**

## *Your Turn 4*

Recreate the DAG we've been working with using `time_ordered_coords()`, then visualize the DAG. You don't need to use any arguments for this function, so `coords = time_ordered_coords()` will do.

`r countdown::countdown(minutes = 2)`

## *Your Turn 4*

```{r}
#| output-location: slide
#| code-line-numbers: "|7"
coffee_cancer_dag_to <- dagify(
  cancer ~ smoking,
  smoking ~ addictive,
  coffee ~ addictive,
  exposure = "coffee",
  outcome = "cancer",
  coords = time_ordered_coords(),
  labels = c(
    "coffee" = "Coffee", 
    "cancer" = "Lung Cancer", 
    "smoking" = "Smoking", 
    "addictive" = "Addictive \nBehavior"
  )
)

ggdag(coffee_cancer_dag_to, use_labels = "label", text = FALSE)
```

## Choosing what variables to include {.large}

. . .

**Adjustment sets and domain knowledge**

. . .

**Conduct sensitivity analysis if you don't have something important**

---

## Common trip ups {.large}

. . .

**Using prediction metrics**

. . .

**The 10% rule**

. . .

**Predictors of the outcome, predictors of the exposure**

. . .

**Forgetting to consider time-ordering (something has to happen before something else to cause it!)**

. . .

**Selection bias and colliders (more later!)**

. . .

**Incorrect functional form for confounders (e.g. BMI often non-linear)**

## Resources: ggdag vignettes {background-color="#23373B"}
### [An Introduction to ggdag](https://ggdag.malco.io/articles/intro-to-ggdag.html)
### [An Introduction to Directed Acyclic Graphs](https://ggdag.malco.io/articles/intro-to-dags.html)
### [Common Structures of Bias](https://ggdag.malco.io/articles/bias-structures.html)
